package com.bourre.ioc.load.runtime {	import com.bourre.ioc.bean.BeanUtils;	import com.bourre.ioc.load.ApplicationLoader;	import com.bourre.ioc.load.FlashVarsUtil;	import com.bourre.ioc.parser.ContextNodeNameList;		import flash.display.DisplayObjectContainer;	import flash.net.URLRequest;	
	/**	 * The RuntimeContextLoader class allow to load external xml context at runtime.	 * 	 * <p>All loaded objects ( dll, resources, display tree ) are injected 	 * into global IoC context.</p>	 * 	 * @example	 * <pre class="prettyprint">	 * 	 * var rtLoader : RuntimeContextLoader = new RuntimeContextLoader(  );	 * rtLoader.addEventListener( ApplicationLoaderEvent.onApplicationInitEVENT, _onComplete );	 * rtLoader.load( new URLRequest( "config/runtimeContext.xml" ) );	 * </pre>	 * 	 * @includeExample context.txt -noswf	 * @includeExample RuntimeContextLoaderSample.as -noswf	 * 	 * @author Romain Ecarnot	 */	public class RuntimeContextLoader extends ApplicationLoader	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private var _bContainer : Boolean;		private var _bSandboxMode : Boolean;						//--------------------------------------------------------------------		// Public properties		//--------------------------------------------------------------------				/**		 * Defines if context links ( url ) are relative to the loaded xml 		 * context file.		 * 		 * <p>If <code>true</code>, all urls must be relative to 		 * the loaded xml context file url.</p>		 * 		 * @default false		 */		public function get sandbox( ) : Boolean		{			return _bSandboxMode;				}		/** @private */		public function set sandbox( enabled : Boolean ) : void		{			_bSandboxMode = enabled;		}				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns <code>URLRequest</code> using internal IoC url manager.		 * 		 * @return The <code>URLRequest</code> using internal IoC url manager.		 */		public static function getContextURL( filename : String ) : URLRequest		{			return ApplicationLoader.getURLRequest( new URLRequest( filename ), FlashVarsUtil.getConfigPathKey( ) );		}		/**		 * Creates new <code>RuntimeContextLoader</code> instance.		 * 		 * @param	container	Container for loaded display tree		 */		public function RuntimeContextLoader( container : DisplayObjectContainer = null )		{			super( getContainer( container ), false );						sandbox = false;			setAntiCache( true );			setDisplayObjectBuilder( new RTDisplayObjectBuilder( ) );		}				/**		 * @inheritDoc		 */		override public function setURL( request : URLRequest ) : void		{			var path : String = request.url;			var args : String = path.split( "?" )[1];						if ( args != null )			{				var params : Array = args.split( "&" );				for (var i : int = 0; i < params.length ; i++)				{					var pair : Array = params[i].split( "=" );					setVariable( pair[0], pair[1]);				}			} 						super.setURL( request );		}		/**		 * Returns <code>true</code> if a container target is defined for 		 * loaded display tree.		 * 		 * @return <code>true</code> if a container target is defined for 		 * loaded display tree.		 */		public function hasContainer() : Boolean		{			return _bContainer;		}				/**		 * @inheritDoc		 */		override public function parseContext( xml : * ) : void		{			var rtBuilder : RTDisplayObjectBuilder = getDisplayObjectBuilder( ) as RTDisplayObjectBuilder;						if( sandbox ) 			{				var url : String = getURL( ).url.substring( 0, getURL( ).url.indexOf( "?" ) );				rtBuilder.setDomainRootPath( url.substring( 0, url.lastIndexOf( "/" ) ) + "/" );			}						super.parseContext( xml );		}					/**		 * @inheritDoc		 */		override public function processParsing( xml : * ) : void		{			if( !hasContainer( ) )			{				delete xml[ ContextNodeNameList.ROOT ];			}						super.processParsing( xml );		}						//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * Retreives correct container for loaded display tree.		 */		protected function getContainer( container : DisplayObjectContainer = null ) : DisplayObjectContainer		{			var target : DisplayObjectContainer;						if( container != null )			{				_bContainer = true;				target = container; 			}			else			{				_bContainer = false;				target = BeanUtils.getApplicationContainer();			}						return target;		}				/**		 * @private		 * Quite mode.		 */		override protected function initQueryURL() : void		{		}				/**		 * @private		 * Quite mode.		 */		override protected function initContext() : void		{		}	}}