/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.bourre.ioc.context.processor {	import com.bourre.error.PrivateConstructorException;	import com.bourre.ioc.parser.ContextAttributeList;	import com.bourre.ioc.parser.ContextNodeNameList;	import com.bourre.log.PixlibDebug;		/**	 * The <code>ProcessingHelper</code> helper gives method for 	 * xml context content pre processing.	 * 	 * @example	 * <pre class="prettyprint">	 * 	 * var oLoader : ApplicationLoader = new ApplicationLoader( this, false );	 * oLoader.addProcessingMethod( ProcessingHelper.changeObjectAttribute, "cross", "visible", "false" );	 * oLoader.addProcessingMethod( ProcessingHelper.changePropertyValue, "cross", "x", 600 );	 * oLoader.addProcessingMethod( ProcessingHelper.addResource, "newStyle", "myStyle.css" );	 * </pre>	 * 	 * @see com.bourre.ioc.load.ApplicationLoader	 * @see com.bourre.ioc.load.runtime.RuntimeContextLoader	 * 	 * @author Romain Ecarnot	 */	public class ProcessingHelper 	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Changes object identifier.		 * 		 * <p>All references to replaced ID are updated.</p>		 * 		 * @param	xml		XML content ( the context )		 * @param	id		Identifier to search for		 * @param	newID	New identifier value to replace		 */		public static function changeObjectID( xml : XML, id : String, newID : String ) : XML		{			var refList : XMLList = xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.REF ) ) && @[ContextAttributeList.REF] == id );						xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id ).@[ContextAttributeList.ID] = newID;						for each (var node : XML in refList)			{				node.@[ContextAttributeList.REF] = newID;			}						return xml;		}				/**		 * Changes object attribute value.		 * 		 * @param	xml				XML content ( the context )		 * @param	id				Identifier to search for		 * @param	attributeName	Attribute name to search for		 * @param	value			New attribute value		 * @param	create			If <code>true</code> attribute is created if not exist		 */		public static function changeObjectAttribute( xml : XML, id : String, attributeName : String, value : Object, create : Boolean = false ) : XML		{			var result : XMLList = xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id );						if( result.hasOwnProperty( getAttributeName( attributeName ) ) || create )			{				result.@[attributeName] = value.toString();			}						return xml;		}				/**		 * Changes a context property value.		 * 		 * @param	xml		XML content ( the context )		 * @param	id		Identifier to search for		 * @param	name	Property name to search for		 * @param	value	New property value		 */		public static function changePropertyValue(  xml : XML, id : String, name : String, value : Object ) : XML		{			xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id ).property.( @[ContextAttributeList.NAME] == name ).@[ContextAttributeList.VALUE] = value.toString( );								return xml;		}				/**		 * Changes method argument value.		 * 		 * @param	xml		XML content ( the context )		 * @param	id		Identifier to search for		 * @param	name	Method name to search for		 * @param	index	Argument index to replace		 * @param	value	New argument value		 * @param	type	New argument type		 */		public static function changeMethodArgumentValue(  xml : XML, id : String, name : String, index : uint, value : Object = null, type : String = null ) : XML		{			var argList : XMLList = xml..*.( hasOwnProperty( getAttributeName( ContextAttributeList.ID ) ) && @[ContextAttributeList.ID] == id )[ContextNodeNameList.METHOD_CALL].( @[ContextAttributeList.NAME] == name ).children( );									if( index < argList.length() )			{				var node : XML = argList[ index ];				var bypassType : Boolean = false;								if( value != null )				{					if( node.attribute( ContextAttributeList.REF ).length() > 0 )					{						bypassType = true;						node.@[ContextAttributeList.REF] = value.toString( );					}					else node.@[ContextAttributeList.VALUE] = value.toString( );				}								if( type != null && !bypassType )				{					node.@[ContextAttributeList.TYPE] = type.toString( );					}			}			else			{				PixlibDebug.ERROR( "Bad argument index = " + index + "/" + argList.length() );			}						return xml;		}				/**		 * Adds a new dll definition.		 * 		 * @param	xml		XML content ( the context )		 * @param	url		DLL url		 */		public static function addDLL( xml : XML, url : String ) : String		{			var dll : XML = <{ContextNodeNameList.DLL} />;			dll.@[ContextAttributeList.URL] = url;						xml.appendChild( dll );						return xml;		}				/**		 * Adds a new resource definition.		 * 		 * @param	xml		XML content ( the context )		 * @param	id		Resource identifier		 * @param	url		Resource url		 */		public static function addResource( xml : XML, id : String, url : String ) : String		{			var rsc : XML = <{ContextNodeNameList.RSC} />;
			rsc.@[ContextAttributeList.ID] = id;			rsc.@[ContextAttributeList.URL] = url;						xml.appendChild( rsc );						return xml;		}				/**		 * Adds xml node.		 * 		 * @param	xml		XML content ( the context )		 * @param	node	New xml node		 */		public static function addNode( xml : XML, node: XML ) : XML		{			xml.appendChild( node );						return xml;		}						//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				private static function getAttributeName( name : String ) : String		{			return "@" + name;				}				/**		 * @private		 */		function ProcessingHelper( access : ConstructorAccess )		{			if ( !(access is ConstructorAccess) ) throw new PrivateConstructorException( );		}	}}internal class ConstructorAccess {	static public const instance : ConstructorAccess = new ConstructorAccess( );}