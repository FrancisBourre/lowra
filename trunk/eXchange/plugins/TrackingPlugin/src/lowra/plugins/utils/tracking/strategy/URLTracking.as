/** * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package lowra.plugins.utils.tracking.strategy {	import com.bourre.plugin.AbstractPlugin;		import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.net.navigateToURL;		/**	 * Tracking strategy using <strong>URL</strong> call.	 * 	 * <p>	 * <span class='classHeaderTableLabel'>Language Version :</span> ActionScript 3.0<br/>	 * <span class='classHeaderTableLabel'>Runtime Versions :</span> Flash Player 9	 * </p>	 * 	 * @includeExample URLTracking_definition.txt -noswf	 * @includeExample URLTracking_use.txt -noswf	 * @includeExample URLTracking_complete.txt -noswf	 * 	 * @author Romain Ecarnot	 */	public class URLTracking extends AbstractTrackingStrategy	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private var _url : String;		private var _window : String;		private var _mode : String;		private var _var : String;				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Creates plugin.		 * 		 * @param 	url			URL to open			 * @param	window		Targeted frame		 * @param	mode		<code>GET</code> or <code>POST</code>		 * @param	variable	Name of th query variable to create to send track 		 * 						link on.		 */		public function URLTracking( url : String, window : String = "_blank", mode : String = "GET", variable : String = "tag" )		{			super( getConstructorAccess( ) );						if( url.length > 0 && ( mode == URLRequestMethod.GET || mode == URLRequestMethod.POST ) )			{				_url = url;				_window = window;				_mode = mode;				_var = variable;			}			else cancel( );		}				//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * @inheritDoc		 */		override protected function process( tag : String ) : void		{			if(_mode == URLRequestMethod.GET)			{				navigateToURL( new URLRequest( _url + "&" + _var + "=" + tag ), _window );			}			else if( _mode == URLRequestMethod.POST)			{				var variables : URLVariables = new URLVariables( );				variables[_var] = tag;								var request : URLRequest = new URLRequest( _url );				request.data = variables;				request.method = URLRequestMethod.POST;								var loader : URLLoader = new URLLoader( );				loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false, 0, true );				loader.addEventListener( HTTPStatusEvent.HTTP_STATUS, httpStatusHandler, false, 0, true );				loader.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler, false, 0, true );				loader.load( request );				}			else			{				throw new Error( "invalid request mode : " + _mode );			}		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------		private function securityErrorHandler(event : SecurityErrorEvent) : void 		{			getLogger( ).error( this + " :: securityErrorHandler: " + event );		}		private function httpStatusHandler(event : HTTPStatusEvent) : void 		{			getLogger( ).error( this + " :: httpStatusHandler: " + event );		}		private function ioErrorHandler(event : IOErrorEvent) : void 		{			getLogger( ).error( this + " :: ioErrorHandler: " + event );		}	}}