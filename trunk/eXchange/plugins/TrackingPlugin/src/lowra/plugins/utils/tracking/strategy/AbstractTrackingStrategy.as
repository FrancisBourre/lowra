/** * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package lowra.plugins.utils.tracking.strategy {	import lowra.plugins.utils.tracking.TrackingStrategy;		import com.bourre.error.UnimplementedVirtualMethodException;	import com.bourre.events.ApplicationBroadcaster;	import com.bourre.plugin.AbstractPlugin;	import com.bourre.plugin.ChannelExpert;	import com.bourre.plugin.PluginDebug;		/**	 * Abstract implementation for tracking strategy.	 * 	 * @see #getConstructorAccess() Class inheritance	 * 	 * @author Romain Ecarnot	 */	public class AbstractTrackingStrategy extends AbstractPlugin implements TrackingStrategy	{		//--------------------------------------------------------------------		// Protected properties		//--------------------------------------------------------------------		private var _bAvailable : Boolean;				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * @inheritDoc		 */		public function track( tag : String ) : void		{			try			{				process(tag);							getLogger().debug(this + "::track() " + tag);			}			catch(e : Error)			{				getLogger().error(this + "::" + e.message);			}		}		/**		 * @inheritDoc		 */		public function isAvailable() : Boolean		{			return _bAvailable;		}				//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * Gives access to <code>AbstractTrackingStrategy</code> contructor.		 * 		 * @example		 * <pre class="prettyprint">		 * package		 * {		 * 	public class MyExtension extends AbstractTrackingStrategy		 * 	{		 * 		super( getConstructorAccess() );		 * 	}		 * }</pre>		 */		protected function getConstructorAccess(  ) : PrivateConstructorAccess		{			return PrivateConstructorAccess.instance;		}		/**		 * Releases plugin if not well created.		 * 		 * <p>Plugin still registered in the IOC Bean factory</p>		 */		protected function cancel() : void		{			_bAvailable = false;						_oController.release();			_oModelLocator.release();			_oViewLocator.release();						fireOnReleasePlugin();			_oEBPublic.removeAllListeners();			ApplicationBroadcaster.getInstance().releaseChannelDispatcher(getChannel());			PluginDebug.release(this);			ChannelExpert.getInstance().releaseChannel(this);		}		/**		 * Do track action.		 * 		 * <p>Template method, each concrete class must override method to 		 * implement concrete tracking process.</p>		 * 		 * @param	tag	Link to track		 * 		 * @throws 	<code>UnimplementedVirtualMethodException</code> â€” Concrete		 * 			class doesn't override the <code>process</code> method		 */		protected function process( tag : String ) : void		{			var msg : String = this + ".process() must be implemented in concrete class";			getLogger().error(msg);			throw( new UnimplementedVirtualMethodException(msg) );		}						//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------						/**		 * @private		 */		function AbstractTrackingStrategy( access : PrivateConstructorAccess )		{			_bAvailable = true;		}	}}internal class PrivateConstructorAccess {	static public const instance : PrivateConstructorAccess = new PrivateConstructorAccess();}